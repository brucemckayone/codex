name: PR and Push CI (Neon ephemeral DB)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - develop

permissions:
  contents: read
  actions: write

env:
  EXPIRES_IN_DAYS: 1

concurrency:
  # use the ref to avoid complex fallback expressions that break parsers locally
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      database: ${{ steps.filter.outputs.database }}
      validation: ${{ steps.filter.outputs.validation }}
      cloudflare-clients: ${{ steps.filter.outputs.cloudflare-clients }}
      test-utils: ${{ steps.filter.outputs.test-utils }}
      web: ${{ steps.filter.outputs.web }}
      auth-worker: ${{ steps.filter.outputs.auth-worker }}
      stripe-webhook-handler: ${{ steps.filter.outputs.stripe-webhook-handler }}
    steps:
      - uses: actions/checkout@v4
      - name: Filter changed packages
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            database:
              - 'packages/database/**'
            validation:
              - 'packages/validation/**'
            cloudflare-clients:
              - 'packages/cloudflare-clients/**'
            test-utils:
              - 'packages/test-utils/**'
            web:
              - 'apps/web/**'
            auth-worker:
              - 'workers/auth/**'
            stripe-webhook-handler:
              - 'workers/stripe-webhook-handler/**'

  create-neon-branch:
    runs-on: ubuntu-latest
    outputs:
      db_url: ${{ steps.create-branch.outputs.db_url }}
      branch_id: ${{ steps.create-branch.outputs.branch_id }}
    steps:
      - name: Generate Neon Branch Name
        id: branch-name
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "name=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
          else
            SANITIZED_REF_NAME=$(echo "${{ github.ref_name }}" | tr / -)
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
            BRANCH_NAME="push-${SANITIZED_REF_NAME}-${SHORT_SHA}"
            # truncate to 63 chars (Neon limit)
            BRANCH_NAME_TRUNC=${BRANCH_NAME:0:63}
            echo "name=${BRANCH_NAME_TRUNC}" >> $GITHUB_OUTPUT
          fi

      - name: Set expiry timestamp
        id: expires
        run: |
          echo "EXPIRES_AT=$(date -u --date='+1 days' +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Debug call Neon API to create branch (shows full error body)
        id: neon-debug
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
          BRANCH_NAME: ${{ steps.branch-name.outputs.name }}
          EXPIRES_AT: ${{ env.EXPIRES_AT }}
        run: |
          echo "Project: $PROJECT_ID"
          echo "Branch: $BRANCH_NAME"
          echo "Expires at: $EXPIRES_AT"
          printf '\nCreating branch via curl (output will include Neon JSON error if any):\n\n'
          curl -sS -w "\n\nHTTP_STATUS:%{http_code}\n" \
            -X POST "https://console.neon.tech/api/v2/projects/$PROJECT_ID/branches" \
            -H "Authorization: Bearer $NEON_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"name\":\"${BRANCH_NAME}\",\"parent_branch\":\"main\",\"expires_at\":\"${EXPIRES_AT}\"}" || true

      - name: Create Neon branch (safer)
        id: create-branch
        uses: neondatabase/create-branch-action@v6
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch_name: ${{ steps.branch-name.outputs.name }}
          parent_branch: main
          api_key: ${{ secrets.NEON_API_KEY }}
          expires_at: ${{ env.EXPIRES_AT }}

  test:
    needs: [changes, create-neon-branch]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20]
    env:
      DATABASE_URL: ${{ needs.create-neon-branch.outputs.db_url }}
      DB_METHOD: NEON_BRANCH
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm typecheck

      - name: Lint
        run: pnpm lint

      - name: Format check
        run: pnpm format:check

      - name: Run migrations
        if: ${{ needs.changes.outputs.database == 'true' }}
        run: pnpm --filter @codex/database db:migrate

      - name: Run tests for affected packages
        if: ${{ needs.changes.outputs.database == 'true' || needs.changes.outputs.validation == 'true' || needs.changes.outputs.cloudflare-clients == 'true' || needs.changes.outputs.test-utils == 'true' || needs.changes.outputs.web == 'true' || needs.changes.outputs.auth-worker == 'true' || needs.changes.outputs.stripe-webhook-handler == 'true' }}
        run: |
          if [[ "${{ needs.changes.outputs.database }}" == "true" ]]; then pnpm --filter @codex/database test; fi
          if [[ "${{ needs.changes.outputs.validation }}" == "true" ]]; then pnpm --filter @codex/validation test; fi
          if [[ "${{ needs.changes.outputs.cloudflare-clients }}" == "true" ]]; then pnpm --filter @codex/cloudflare-clients test; fi
          if [[ "${{ needs.changes.outputs.test-utils }}" == "true" ]]; then pnpm --filter @codex/test-utils test; fi
          if [[ "${{ needs.changes.outputs.web }}" == "true" ]]; then pnpm --filter web test; fi
          if [[ "${{ needs.changes.outputs.auth-worker }}" == "true" ]]; then pnpm --filter auth test; fi
          if [[ "${{ needs.changes.outputs.stripe-webhook-handler }}" == "true" ]]; then pnpm --filter stripe-webhook-handler test; fi

  e2e-tests:
    name: E2E Tests
    needs: [changes, create-neon-branch]
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.web == 'true' }}
    env:
      DATABASE_URL: ${{ needs.create-neon-branch.outputs.db_url }}
      DB_METHOD: NEON_BRANCH
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_TEST_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps
      - name: Run E2E tests
        run: pnpm test:e2e
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: apps/web/playwright-report/
          retention-days: 30

  deploy-workers:
    name: Deploy Cloudflare Workers
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: pnpm/action-setup@v4
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Deploy stripe-webhook-handler worker
        run: pnpm --filter stripe-webhook-handler deploy stripe-webhook-handler --legacy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      - name: Deployment notification
        if: success()
        run: echo "✅ Workers deployed successfully to production"
      - name: Deployment failed
        if: failure()
        run: echo "❌ Worker deployment failed - check logs"
