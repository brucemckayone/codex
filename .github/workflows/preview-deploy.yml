name: Preview Deployment

on:
  # Run after tests complete successfully
  workflow_run:
    workflows: ['PR and Push CI (Neon ephemeral DB)']
    types:
      - completed
  # Also run when PR is closed for cleanup
  pull_request:
    types: [closed]

permissions:
  contents: read
  pull-requests: write
  deployments: write

concurrency:
  group: preview-${{ github.event.workflow_run.pull_requests[0].number || github.event.pull_request.number }}
  cancel-in-progress: true # Cancel old deployments for same PR

env:
  # Handle both workflow_run and pull_request triggers
  PR_NUMBER: ${{ github.event.workflow_run.pull_requests[0].number || github.event.pull_request.number }}

jobs:
  # Cleanup preview when PR is closed
  cleanup-preview:
    name: Cleanup Preview Environment
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    steps:
      - uses: actions/checkout@v4

      - name: Delete Neon branch
        uses: neondatabase/delete-branch-action@v3
        continue-on-error: true
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch: pr-${{ env.PR_NUMBER }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install wrangler
        run: pnpm add -g wrangler

      - name: Delete worker deployments
        continue-on-error: true
        run: |
          wrangler delete --name stripe-webhook-handler-preview-${{ env.PR_NUMBER }} || true
          wrangler delete --name auth-worker-preview-${{ env.PR_NUMBER }} || true
          wrangler delete --name codex-web-preview-${{ env.PR_NUMBER }} || true
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Delete preview DNS records
        continue-on-error: true
        run: |
          chmod +x .github/scripts/manage-preview-dns.sh
          .github/scripts/manage-preview-dns.sh delete ${{ env.PR_NUMBER }} ${{ secrets.CLOUDFLARE_API_TOKEN }} ${{ secrets.CLOUDFLARE_ZONE_ID }}

      - name: Comment cleanup complete
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ env.PR_NUMBER }},
              body: '🧹 Preview environment cleaned up successfully (workers, database, and DNS records removed).'
            });

  deploy-preview:
    name: Deploy Preview Environment
    runs-on: ubuntu-latest
    # Only deploy if: (1) not a closed event, (2) workflow_run succeeded, (3) workflow_run was triggered by a PR
    if: |
      github.event.action != 'closed' &&
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'pull_request'
    outputs:
      web_url: ${{ steps.deploy-web.outputs.deployment-url }}

    steps:
      - name: Debug workflow context
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}"
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Workflow run event: ${{ github.event.workflow_run.event }}"
          echo "Workflow run ID: ${{ github.event.workflow_run.id }}"
          echo "PR Number: ${{ env.PR_NUMBER }}"
          echo "Has PR requests: ${{ github.event.workflow_run.pull_requests[0] != null }}"

      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # CRITICAL: Download artifact FIRST (fail fast if expired/missing)
      - name: Download Neon connection artifact
        uses: actions/download-artifact@v4
        with:
          name: neon-connection-${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      # Validate artifact contents BEFORE creating any resources
      - name: Validate and load DATABASE_URL from artifact
        id: load-db-url
        run: |
          # Validate files exist
          if [ ! -f database-url.txt ]; then
            echo "❌ ERROR: Artifact missing database-url.txt"
            exit 1
          fi
          if [ ! -f branch-id.txt ]; then
            echo "❌ ERROR: Artifact missing branch-id.txt"
            exit 1
          fi
          if [ ! -f branch-name.txt ]; then
            echo "❌ ERROR: Artifact missing branch-name.txt"
            exit 1
          fi

          # Validate DATABASE_URL is not empty
          DATABASE_URL=$(cat database-url.txt)
          if [ -z "$DATABASE_URL" ]; then
            echo "❌ ERROR: DATABASE_URL is empty"
            exit 1
          fi

          # Load all values
          echo "::add-mask::$DATABASE_URL"
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV

          BRANCH_ID=$(cat branch-id.txt)
          echo "BRANCH_ID=$BRANCH_ID" >> $GITHUB_ENV

          BRANCH_NAME=$(cat branch-name.txt)
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

          echo "✅ Artifact validated successfully"
          echo "📊 Database branch: $BRANCH_NAME"

      # Only AFTER artifact validation, create DNS records
      - name: Create preview DNS records
        id: dns-creation
        run: |
          echo "🌐 Creating DNS records for preview-${{ env.PR_NUMBER }}..."
          chmod +x .github/scripts/manage-preview-dns.sh
          .github/scripts/manage-preview-dns.sh create ${{ env.PR_NUMBER }} ${{ secrets.CLOUDFLARE_API_TOKEN }} ${{ secrets.CLOUDFLARE_ZONE_ID }}

      # Verify DNS propagation with polling instead of fixed sleep
      - name: Verify DNS propagation
        timeout-minutes: 2
        run: |
          echo "⏳ Waiting for DNS propagation..."
          for i in {1..30}; do
            if dig +short codex-preview-${{ env.PR_NUMBER }}.revelations.studio | grep -q .; then
              echo "✅ DNS propagated successfully after ${i} attempts"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "⚠️ DNS propagation timeout - continuing anyway (might still work)"
              break
            fi
            echo "Waiting for DNS propagation... ($i/30)"
            sleep 2
          done

      # Deploy stripe-webhook-handler worker
      - name: Deploy stripe-webhook-handler (preview)
        id: deploy-api
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: workers/stripe-webhook-handler
          command: >
            deploy --name stripe-webhook-handler-preview-${{ env.PR_NUMBER }}
            --var ENVIRONMENT:preview
            --route "api-preview-${{ env.PR_NUMBER }}.revelations.studio/*"
          secrets: |
            DATABASE_URL
            STRIPE_SECRET_KEY
            STRIPE_WEBHOOK_SECRET_PAYMENT
            STRIPE_WEBHOOK_SECRET_SUBSCRIPTION
            STRIPE_WEBHOOK_SECRET_CONNECT
            STRIPE_WEBHOOK_SECRET_CUSTOMER
            STRIPE_WEBHOOK_SECRET_BOOKING
            STRIPE_WEBHOOK_SECRET_DISPUTE
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_TEST_KEY }}
          STRIPE_WEBHOOK_SECRET_PAYMENT: ${{ secrets.STRIPE_TEST_PAYMENT_WEBHOOK_SECRET }}
          STRIPE_WEBHOOK_SECRET_SUBSCRIPTION: ${{ secrets.STRIPE_TEST_SUBSCRIPTION_WEBHOOK_SECRET }}
          STRIPE_WEBHOOK_SECRET_CONNECT: ${{ secrets.STRIPE_TEST_CONNECT_WEBHOOK_SECRET }}
          STRIPE_WEBHOOK_SECRET_CUSTOMER: ${{ secrets.STRIPE_TEST_CUSTOMER_WEBHOOK_SECRET }}
          STRIPE_WEBHOOK_SECRET_BOOKING: ${{ secrets.STRIPE_TEST_BOOKING_WEBHOOK_SECRET }}
          STRIPE_WEBHOOK_SECRET_DISPUTE: ${{ secrets.STRIPE_TEST_DISPUTE_WEBHOOK_SECRET }}

      - name: Set API URL
        id: api-url
        run: |
          API_URL="https://api-preview-${{ env.PR_NUMBER }}.revelations.studio"
          echo "url=$API_URL" >> $GITHUB_OUTPUT
          echo "API_URL=$API_URL" >> $GITHUB_ENV

      # Set web URL first (needed for auth worker)
      - name: Set Web URL
        run: |
          WEB_URL="https://codex-preview-${{ env.PR_NUMBER }}.revelations.studio"
          echo "WEB_URL=$WEB_URL" >> $GITHUB_ENV

      # Deploy auth worker
      - name: Deploy auth-worker (preview)
        id: deploy-auth
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: workers/auth
          command: >
            deploy --name auth-worker-preview-${{ env.PR_NUMBER }}
            --var ENVIRONMENT:preview
            --var API_URL:${{ env.API_URL }}
            --var WEB_APP_URL:${{ env.WEB_URL }}
            --route "auth-preview-${{ env.PR_NUMBER }}.revelations.studio/*"
          secrets: |
            DATABASE_URL
            SESSION_SECRET
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}

      - name: Set Auth URL
        id: auth-url
        run: |
          AUTH_URL="https://auth-preview-${{ env.PR_NUMBER }}.revelations.studio"
          echo "url=$AUTH_URL" >> $GITHUB_OUTPUT
          echo "AUTH_URL=$AUTH_URL" >> $GITHUB_ENV

      # Build and deploy SvelteKit app
      - name: Build SvelteKit app
        run: pnpm --filter web build
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Deploy SvelteKit (preview)
        id: deploy-web
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: apps/web
          command: >
            deploy --name codex-web-preview-${{ env.PR_NUMBER }}
            --var ENVIRONMENT:preview
            --var AUTH_WORKER_URL:${{ env.AUTH_URL }}
            --var API_URL:${{ env.API_URL }}
            --route "codex-preview-${{ env.PR_NUMBER }}.revelations.studio/*"
          secrets: |
            DATABASE_URL
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      # Comment on PR with preview URLs
      - name: Comment preview URLs
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ env.PR_NUMBER }};
            const webUrl = `https://codex-preview-${prNumber}.revelations.studio`;
            const apiUrl = `https://api-preview-${prNumber}.revelations.studio`;
            const authUrl = `https://auth-preview-${prNumber}.revelations.studio`;
            const comment = `## 🚀 Preview Deployment Ready

            **🌐 Web App:** ${webUrl}
            **🔌 API (Stripe Webhooks):** ${apiUrl}
            **🔐 Auth:** ${authUrl}
            **📊 Database:** Neon branch \`${{ env.BRANCH_NAME }}\`

            ### Testing Checklist
            - [ ] Visual confirmation of UI changes
            - [ ] Test user flows end-to-end
            - [ ] Verify database operations
            - [ ] Check worker functionality (webhooks, auth)

            ### Preview Stack Details
            - **Web App Worker:** \`codex-web-preview-${prNumber}\`
            - **Stripe Webhook Handler:** \`stripe-webhook-handler-preview-${prNumber}\`
            - **Auth Worker:** \`auth-worker-preview-${prNumber}\`
            - **DNS Records:** Automatically created and proxied through Cloudflare

            **Note:** Preview environment with custom domains on revelations.studio. All resources will be automatically deleted when PR is closed.`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });
