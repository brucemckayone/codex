{
  "version": 3,
  "sources": ["../bundle-l4fq9o/checked-fetch.js", "../../../src/index.ts", "../../../../../node_modules/.pnpm/wrangler@4.45.0_@cloudflare+workers-types@4.20251014.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../node_modules/.pnpm/wrangler@4.45.0_@cloudflare+workers-types@4.20251014.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-l4fq9o/middleware-insertion-facade.js", "../../../../../node_modules/.pnpm/wrangler@4.45.0_@cloudflare+workers-types@4.20251014.0/node_modules/wrangler/templates/middleware/common.ts", "../bundle-l4fq9o/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/brucemckay/development/Codex/workers/queue-consumer/.wrangler/tmp/dev-gWMdxK",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n  const url =\n    request instanceof URL\n      ? request\n      : new URL(\n          (typeof request === 'string'\n            ? new Request(request, init)\n            : request\n          ).url\n        );\n  if (url.port && url.port !== '443' && url.protocol === 'https:') {\n    if (!urls.has(url.toString())) {\n      urls.add(url.toString());\n      console.warn(\n        `WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n          ` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n      );\n    }\n  }\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n  apply(target, thisArg, argArray) {\n    const [request, init] = argArray;\n    checkURL(request, init);\n    return Reflect.apply(target, thisArg, argArray);\n  },\n});\n", "/**\n * Queue Consumer Worker\n *\n * Processes media transcoding jobs from the queue\n */\n\n// Cloudflare Queue types\ninterface Message<Body = unknown> {\n  readonly id: string;\n  readonly timestamp: Date;\n  readonly body: Body;\n  ack(): void;\n  retry(): void;\n}\n\ninterface MessageBatch<Body = unknown> {\n  readonly queue: string;\n  readonly messages: readonly Message<Body>[];\n}\n\nexport interface Env {\n  // Add bindings here as needed\n}\n\nexport interface QueueMessage {\n  id: string;\n  type: 'video' | 'audio';\n  url: string;\n  contentId: string;\n}\n\nexport default {\n  async queue(batch: MessageBatch<QueueMessage>, _env: Env): Promise<void> {\n    console.log(`Processing batch of ${batch.messages.length} messages`);\n\n    for (const message of batch.messages) {\n      try {\n        await processMessage(message.body);\n        message.ack();\n      } catch (error) {\n        console.error(`Failed to process message ${message.id}:`, error);\n        message.retry();\n      }\n    }\n  },\n};\n\nasync function processMessage(message: QueueMessage): Promise<void> {\n  console.log(`Processing ${message.type} for content ${message.contentId}`);\n\n  // Placeholder for actual transcoding logic\n  // This will integrate with RunPod API in the future\n\n  return Promise.resolve();\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "import worker, * as OTHER_EXPORTS from '/Users/brucemckay/development/Codex/workers/queue-consumer/src/index.ts';\nimport * as __MIDDLEWARE_0__ from '/Users/brucemckay/development/Codex/node_modules/.pnpm/wrangler@4.45.0_@cloudflare+workers-types@4.20251014.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts';\nimport * as __MIDDLEWARE_1__ from '/Users/brucemckay/development/Codex/node_modules/.pnpm/wrangler@4.45.0_@cloudflare+workers-types@4.20251014.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts';\n\nexport * from '/Users/brucemckay/development/Codex/workers/queue-consumer/src/index.ts';\nconst MIDDLEWARE_TEST_INJECT = '__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__';\nexport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n  __MIDDLEWARE_0__.default,\n  __MIDDLEWARE_1__.default,\n];\nexport default worker;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, {\n  __INTERNAL_WRANGLER_MIDDLEWARE__,\n} from '/Users/brucemckay/development/Codex/workers/queue-consumer/.wrangler/tmp/bundle-l4fq9o/middleware-insertion-facade.js';\nimport {\n  __facade_invoke__,\n  __facade_register__,\n  Dispatcher,\n} from '/Users/brucemckay/development/Codex/node_modules/.pnpm/wrangler@4.45.0_@cloudflare+workers-types@4.20251014.0/node_modules/wrangler/templates/middleware/common.ts';\nimport type { WorkerEntrypointConstructor } from '/Users/brucemckay/development/Codex/workers/queue-consumer/.wrangler/tmp/bundle-l4fq9o/middleware-insertion-facade.js';\n\n// Preserve all the exports from the worker\nexport * from '/Users/brucemckay/development/Codex/workers/queue-consumer/.wrangler/tmp/bundle-l4fq9o/middleware-insertion-facade.js';\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n  readonly #noRetry: ScheduledController['noRetry'];\n\n  constructor(\n    readonly scheduledTime: number,\n    readonly cron: string,\n    noRetry: ScheduledController['noRetry']\n  ) {\n    this.#noRetry = noRetry;\n  }\n\n  noRetry() {\n    if (!(this instanceof __Facade_ScheduledController__)) {\n      throw new TypeError('Illegal invocation');\n    }\n    // Need to call native method immediately in case uncaught error thrown\n    this.#noRetry();\n  }\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n  // If we don't have any middleware defined, just return the handler as is\n  if (\n    __INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n    __INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n  ) {\n    return worker;\n  }\n  // Otherwise, register all middleware once\n  for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n    __facade_register__(middleware);\n  }\n\n  const fetchDispatcher: ExportedHandlerFetchHandler = function (\n    request,\n    env,\n    ctx\n  ) {\n    if (worker.fetch === undefined) {\n      throw new Error('Handler does not export a fetch() function.');\n    }\n    return worker.fetch(request, env, ctx);\n  };\n\n  return {\n    ...worker,\n    fetch(request, env, ctx) {\n      const dispatcher: Dispatcher = function (type, init) {\n        if (type === 'scheduled' && worker.scheduled !== undefined) {\n          const controller = new __Facade_ScheduledController__(\n            Date.now(),\n            init.cron ?? '',\n            () => {}\n          );\n          return worker.scheduled(controller, env, ctx);\n        }\n      };\n      return __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n    },\n  };\n}\n\nfunction wrapWorkerEntrypoint(\n  klass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n  // If we don't have any middleware defined, just return the handler as is\n  if (\n    __INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n    __INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n  ) {\n    return klass;\n  }\n  // Otherwise, register all middleware once\n  for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n    __facade_register__(middleware);\n  }\n\n  // `extend`ing `klass` here so other RPC methods remain callable\n  return class extends klass {\n    #fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n      request,\n      env,\n      ctx\n    ) => {\n      this.env = env;\n      this.ctx = ctx;\n      if (super.fetch === undefined) {\n        throw new Error('Entrypoint class does not define a fetch() function.');\n      }\n      return super.fetch(request);\n    };\n\n    #dispatcher: Dispatcher = (type, init) => {\n      if (type === 'scheduled' && super.scheduled !== undefined) {\n        const controller = new __Facade_ScheduledController__(\n          Date.now(),\n          init.cron ?? '',\n          () => {}\n        );\n        return super.scheduled(controller);\n      }\n    };\n\n    fetch(request: Request<unknown, IncomingRequestCfProperties>) {\n      return __facade_invoke__(\n        request,\n        this.env,\n        this.ctx,\n        this.#dispatcher,\n        this.#fetchDispatcher\n      );\n    }\n  };\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === 'object') {\n  WRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === 'function') {\n  WRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
